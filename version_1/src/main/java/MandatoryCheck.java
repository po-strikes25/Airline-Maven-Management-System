
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Shilpi Mazumdar
 */
public class MandatoryCheck extends javax.swing.JFrame {

    /**
     * Creates new form MandatoryCheck
     */
    Connection connection;
    PreparedStatement prestatement;
    
    public MandatoryCheck() {
        initComponents();
        try {
            try {
                // To establish connection with the SQL DB and server (link/stream)
                Class.forName("com.mysql.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AddNewFlights.class.getName()).log(Level.SEVERE, null, ex);
            }
            // To establish connection with database
            connection = (Connection) DriverManager.getConnection("jdbc:mysql://localhost/airlinemavendatabase", "root", "Lakshmi@06");
        } catch (SQLException ex) {
            Logger.getLogger(AddNewFlights.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static String doHashing(String password) {
        try {
            //In this Hashing Function we have used Message Digest Algorithm to secure the admin password
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.update(password.getBytes());
            byte[] resultByteArray = messageDigest.digest();
            StringBuilder sb = new StringBuilder();
            
            for (byte b : resultByteArray) 
                sb.append(String.format("%02x", b));
            
            return sb.toString();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SignUpAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        banner1 = new javax.swing.JLabel();
        banner2 = new javax.swing.JLabel();
        Username = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        Password = new javax.swing.JLabel();
        Account = new javax.swing.JLabel();
        passenger = new javax.swing.JRadioButton();
        admin = new javax.swing.JRadioButton();
        login = new javax.swing.JButton();
        signup = new javax.swing.JButton();
        guest = new javax.swing.JButton();
        password = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(660, 320));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        banner1.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        banner1.setForeground(new java.awt.Color(255, 255, 255));
        banner1.setText("Welcome to the International Flight Gateway System");
        getContentPane().add(banner1, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 17, -1, 30));

        banner2.setFont(new java.awt.Font("Cambria", 0, 15)); // NOI18N
        banner2.setForeground(new java.awt.Color(255, 255, 255));
        banner2.setText("Please login to continue to our mian window");
        getContentPane().add(banner2, new org.netbeans.lib.awtextra.AbsoluteConstraints(174, 45, -1, -1));

        Username.setFont(new java.awt.Font("Cambria", 0, 13)); // NOI18N
        Username.setForeground(new java.awt.Color(255, 255, 255));
        Username.setText("Username/ID");
        getContentPane().add(Username, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 84, 83, -1));

        username.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        username.setText("Please enter your username");
        getContentPane().add(username, new org.netbeans.lib.awtextra.AbsoluteConstraints(216, 82, 180, -1));

        Password.setFont(new java.awt.Font("Cambria", 0, 13)); // NOI18N
        Password.setForeground(new java.awt.Color(255, 255, 255));
        Password.setText("Password");
        getContentPane().add(Password, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 123, 83, -1));

        Account.setFont(new java.awt.Font("Cambria", 0, 13)); // NOI18N
        Account.setForeground(new java.awt.Color(255, 255, 255));
        Account.setText("Account Type");
        getContentPane().add(Account, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 162, 83, -1));

        passenger.setFont(new java.awt.Font("Cambria", 0, 13)); // NOI18N
        passenger.setForeground(new java.awt.Color(255, 255, 255));
        passenger.setText("Passenger");
        getContentPane().add(passenger, new org.netbeans.lib.awtextra.AbsoluteConstraints(216, 160, 93, -1));

        admin.setFont(new java.awt.Font("Cambria", 0, 13)); // NOI18N
        admin.setForeground(new java.awt.Color(255, 255, 255));
        admin.setText("Administrator");
        getContentPane().add(admin, new org.netbeans.lib.awtextra.AbsoluteConstraints(327, 160, 120, -1));

        login.setFont(new java.awt.Font("Cambria", 0, 13)); // NOI18N
        login.setText("Login");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });
        getContentPane().add(login, new org.netbeans.lib.awtextra.AbsoluteConstraints(216, 199, -1, -1));

        signup.setFont(new java.awt.Font("Cambria", 0, 13)); // NOI18N
        signup.setText("SignUp");
        signup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupActionPerformed(evt);
            }
        });
        getContentPane().add(signup, new org.netbeans.lib.awtextra.AbsoluteConstraints(327, 199, -1, -1));

        guest.setFont(new java.awt.Font("Cambria", 0, 13)); // NOI18N
        guest.setText("View as Guest");
        guest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestActionPerformed(evt);
            }
        });
        getContentPane().add(guest, new org.netbeans.lib.awtextra.AbsoluteConstraints(433, 199, -1, -1));

        password.setText("*****888888888");
        getContentPane().add(password, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 120, 180, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Shilpi Mazumdar\\Desktop\\Acciojob Projects\\Airline Mgmt\\wallpaperflare.com_wallpaper4.jpg")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 280));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        try {
            // To set off the mandataoryCheck window when login details are correct
            
            String userName = username.getText();
                        
            //The above established connection helps to create statement
            java.sql.Statement statement = connection.createStatement();
            
            //Account Type selected by the user and connection with the respective database
            if(passenger.isSelected() && admin.isSelected()){
                //Showing a message to select one option from admin and passenger(acoountType)
                JOptionPane.showMessageDialog(null, "Please select one User Type");
            } else if(passenger.isSelected()) {
                /* PasswordField returns a char[] - Issue was here while returning value from
                getPassword() function */
                String passworD = String.valueOf(password.getPassword());
                
                // Obtaining and storing the result of the statement and executing query indirectly on MYsql software
                prestatement = connection.prepareStatement("select * from passengers where idpassengers = ? and password = ?");
                
                prestatement.setString(1, userName);
                prestatement.setString(2, passworD);
                
                ResultSet res;
                res = prestatement.executeQuery();
                
                if(res.next()) {
                    /* Checking Hash Value of Passwords 
                    If result is not null then open Passenger Window */
                    PassengerWindow  passengerwindow = new PassengerWindow();
                    passengerwindow.setVisible(true);
                    // To make the MandatoryCheck Window vanish
                    this.dispose();
                } else {
                    // If result is null then show user not found
                    JOptionPane.showMessageDialog(null, "User Not Found");
                    username.setText("Please enter your username");
                    password.setText("*********");
                }
            } else if(admin.isSelected()) {
                /* PasswordField returns a char[] - Issue was here while returning value from
                getPassword() function */
                String passworD = doHashing(String.valueOf(password.getPassword()));
            
                // Obtaining and storing the result of the statement and executing query indirectly on MYsql software
                prestatement = connection.prepareStatement("select * from administrator where idadministrator = ?");
                
                prestatement.setString(1, userName);
                
                ResultSet res;
                res = prestatement.executeQuery();
                
                if(res.next() && passworD.equals(res.getString("password"))) {
                    /* Checking Hash Value of Passwords 
                    If result is not null then open Administrator Window */
                    administratorWindow administratorwindow = new administratorWindow();
                    administratorwindow.setVisible(true);
                    // To make the MandatoryCheck Window vanish
                    this.dispose();
                } else {
                    // If result is null then show user not found
                    JOptionPane.showMessageDialog(null, "User Not Found");
                    username.setText("Please enter your username");
                    password.setText("*********");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(MandatoryCheck.class.getName()).log(Level.SEVERE, null, ex);
        }            
    }//GEN-LAST:event_loginActionPerformed

    private void signupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupActionPerformed
        // To retrieve account type selection and open respective window for the admin or passenger :
        if(passenger.isSelected() && admin.isSelected()){
            //Showing a message to select one option from admin and passenger(acoountType)
            JOptionPane.showMessageDialog(null, "Please select one account type");
        } else if(!passenger.isSelected() && !admin.isSelected()) {
            //Showing a message to select one option from admin and passenger(acoountType)
            JOptionPane.showMessageDialog(null, "Please select an account type to proceed");
        } else if(admin.isSelected()) {
            SignUpAdmin signupadmin = new SignUpAdmin();
            signupadmin.setVisible(true);
            // To make the MandatoryCheck Window vanish
            this.dispose();
        } else if(passenger.isSelected()) {
            SignUpPassenger signuppassenger = new SignUpPassenger();
            signuppassenger.setVisible(true);
            // To make the MandatoryCheck Window vanish
            this.dispose();
        }
    }//GEN-LAST:event_signupActionPerformed

    private void guestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestActionPerformed
        // To open the Book Tickets Window :
        GuestBookTickets guestBookTicket = new GuestBookTickets();
        guestBookTicket.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_guestActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MandatoryCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MandatoryCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MandatoryCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MandatoryCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MandatoryCheck().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Account;
    private javax.swing.JLabel Password;
    private javax.swing.JLabel Username;
    private javax.swing.JRadioButton admin;
    private javax.swing.JLabel banner1;
    private javax.swing.JLabel banner2;
    private javax.swing.JButton guest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton login;
    private javax.swing.JRadioButton passenger;
    private javax.swing.JPasswordField password;
    private javax.swing.JButton signup;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
